version: 0.2

phases:
  # インストールフェーズ
  install:
    runtime-versions:
      java: openjdk11 # Java 11を使用
    commands:
      # CodeArtifactからMavenリポジトリの認証トークンを取得
      - CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain rayoo-domain --domain-owner 047403811176 --query authorizationToken --output text)
      # CodeArtifactからMavenリポジトリのURLを取得
      - CODEARTIFACT_REPOSITORY_URL=$(aws codeartifact get-repository-endpoint --domain rayoo-domain --repository ${CODEARTIFACT_REPOSITORY_NAME} --format maven --output text)
      - echo "Maven dependencies will be downloaded during the build phase" # ビルド時にMaven依存関係をダウンロード
      - mkdir -p ~/.m2 # .m2ディレクトリを作成
      - cp settings.xml ~/.m2/settings.xml # settings.xmlをコピー

  # ビルド前フェーズ
  pre_build:
    commands:
      - echo "Starting Unit tests..." # ユニットテスト開始
      - cd project # プロジェクトディレクトリに移動
      - dir # ファイル構成を確認
      - mvn test # Mavenでユニットテストを実行
      - echo "Unit tests Completed..." # ユニットテスト完了

  # ビルドフェーズ
  build:
    commands:
      - dir project/src/main/java # ソースコードディレクトリを確認
      - dir configuration # 設定ファイルディレクトリを確認
      - mvn package # Mavenでパッケージングを実行

  # ビルド後フェーズ
  post_build:
    commands:
      # Lambda関数のコードを更新
      - aws lambda update-function-code --function-name ${ProjectName} --zip-file fileb://target/${ProjectName}.zip
      # buildspec.ymlをS3にアップロード
      - aws s3 cp configuration/buildspec.yml s3://${ProjectName}/configuration/
      # pom.xmlをS3にアップロード
      - aws s3 cp configuration/pom.xml s3://${ProjectName}/configuration/
      - echo "Starting appspec.yml create process..." # appspec.yml作成開始
      # Lambda関数のエイリアス名を取得
      - ALIAS=$(aws lambda list-aliases --function-name ${ProjectName} --query 'Aliases[?FunctionVersion!=`$LATEST`].Name' --output text)
      # Lambda関数の現在のバージョンを取得
      - CURRENT_VERSION=$(aws lambda get-alias --function-name ${ProjectName} --name $ALIAS --query 'FunctionVersion' --output text)
      # Lambda関数の新しいバージョンを作成
      - TARGET_VERSION=$(aws lambda publish-version --function-name ${ProjectName} --description "New version" --query 'Version' --output text)
      # appspec.ymlにパラメータを設定
      - sed -i "s/{{Name}}/${ProjectName}/g"              configuration/appspec.yml
      - sed -i "s/{{Alias}}/$ALIAS/g"                     configuration/appspec.yml
      - sed -i "s/{{CurrentVersion}}/$CURRENT_VERSION/g"  configuration/appspec.yml
      - sed -i "s/{{TargetVersion}}/$TARGET_VERSION/g"    configuration/appspec.yml
      - cat configuration/appspec.yml # appspec.ymlの内容を確認
      - cp  configuration/appspec.yml . # appspec.ymlをコピー
      - ls # ファイルリストを確認
      - aws s3 cp configuration/appspec.yml s3://${ProjectName}/configuration/ # appspec.ymlをS3にアップロード

# テストレポートの設定
reports:
  maven_reports:
    files:
      - "target/surefire-reports/*" # Mavenのテストレポートのパス
    file-format: "JUNITXML"

# ビルド成果物の設定
artifacts:
  files:
    - target/${ProjectName}.zip # ビルド成果物のZIPファイル
    - appspec.yml # appspec.ymlファイル
  name: BuildOutput
